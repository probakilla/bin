#!/usr/bin/python3
import getopt
import sys

# Global vars
no_out = False
src_ext = "cpp"
head_ext = "hpp"
indent = ""
private_mbr = False
interface = False
main = False
namespace = False
namespace_name = ""
derived = False
derived_name = ""


def usage():
    print('USAGE : mkcpp <filename> [options]')
    print('Option list :')
    print(' -h, --help\n\t' +
          'Display the usage of the script and the option list.')
    print(' -i, --interface\n\t ' +
          'Create an interface only.')
    print(' -m, --main\n\t' +
          'Create a main file only.')
    print(' -c, -extentions\n\t' +
          'Change the file extentions to .cc for sources and .hh for' +
          '\n\theaders. By default, file extentions are .cpp and .hpp')
    print(' -s NAMESPACE, --namespace=NAMESPACE\n\t ' +
          'Add a namespace for the created files where NAMESPACE is its name.')
    print(' -d NAME, --derived=NAME\n\t' +
          'Add derivation for the created files where NAME is the name' +
          '\n\tof the derived class.')


def headers(file_name):
    header = open(file_name + "." + head_ext, "w")
    upper_name = file_name.upper()
    upper_ext = head_ext.upper()
    header.write("#ifndef " + upper_name + "_" + upper_ext + "\n")
    header.write("#define " + upper_name + "_" + upper_ext + "\n\n")

    # Derives header
    if derived:
        header.write("#include \"" + derived_name + "." + head_ext + "\"\n\n")
    # Namespace start
    if namespace:
        header.write("namespace " + namespace_name + "\n" + "{\n")
    # Class start
    header.write(indent + "class " + file_name)
    # Is derived
    if derived:
        header.write(" : public " + derived_name)
    header.write("\n" + indent + "{\n")
    # Visibility
    header.write(indent + "public:\n")
    # Constructor
    if not interface:
        header.write(indent + "  " + file_name + "();\n\n")
    # Destructor
    if interface:
        header.write(indent + "  virtual ~" + file_name + "() = 0;\n\n")
    else:
        header.write(indent + "  virtual ~" + file_name + "();\n\n")
    # Private
    if not interface:
        header.write(indent + "private:\n\n")
    # Class end
    header.write(indent + "}\n")
    # Namespace end
    if namespace:
        header.write("}\n")
    # endif
    header.write("\n#endif // !defined(" + upper_name + "_" + upper_ext + ")")

    header.close()
# END HEADERS


def source(file_name):
    src = open(file_name + "." + src_ext, "w")
    if main:
        src.write("#include <iostream>\n\n")
    if not main:
        src.write("#include \"" + file_name + "." + head_ext + "\"\n\n")
        if namespace:
            src.write("namespace " + namespace_name + "\n{\n")
            src.write(indent + file_name + "::" + file_name + "() {}\n\n")
            src.write(indent + file_name + "::~" + file_name + "() {}\n")
            if namespace:
                src.write("}")
    if main:
        src.write("\n\nint main ()\n{\n  return EXIT_SUCCESS;\n}")


# Main simulation
if __name__ == "__main__":
    # Parsing options
    try:
        opts, args = getopt.getopt(sys.argv[2:], 'himcs:d:',
                                   ["help", "interface", "main", "extentions",
                                    "namespace=", "derived="])
    except getopt.GetoptError as err:
        print(str(err) + "\n")
        usage()
        sys.exit(2)

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            no_out = True
            usage()
            sys.exit(2)
        elif opt in ("-i", "--interface"):
            interface = True
        elif opt in ("-m", "--main"):
            main = True
        elif opt in ("-c", "--extentions"):
            src_ext = "cc"
            head_ext = "hh"
        elif opt in ("-s", "--namespace"):
            namespace = True
            namespace_name = arg
            indent = "  "
        elif opt in ("-d", "--derived"):
            derived = True
            derived_name = arg
        else:
            assert False, "Unhandled option"

if not no_out:
    file_name = sys.argv[1]
    if file_name[0] == '-':
        print("File name needed")
        sys.exit(2)
    if not main:
        headers(sys.argv[1])
    if not interface:
        print(interface)
        source(sys.argv[1])
